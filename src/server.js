//AplicaÃ§Ãµes podem ser Stateful ou Stateless
//Stateful: O servidor guarda o estado da aplicaÃ§Ã£o, ou seja, ele guarda informaÃ§Ãµes sobre o cliente entre as requisiÃ§Ãµes. Ex: SessÃµes, Cookies
//Stateless: O servidor nÃ£o guarda o estado da aplicaÃ§Ã£o, ou seja, ele nÃ£o guarda informaÃ§Ãµes sobre o cliente entre as requisiÃ§Ãµes. Ex: APIs REST
// CabeÃ§alhos (RequisiÃ§Ã£o/resposta) - SÃ£o metadados que fornecem informaÃ§Ãµes adicionais sobre a requisiÃ§Ã£o ou resposta HTTP. Eles sÃ£o enviados no inÃ­cio da mensagem HTTP e sÃ£o compostos por pares de chave-valor. Ex: Content-Type, Authorization, Accept, User-Agent
import * as http from 'node:http';
import {json} from './middlewares/json.js'
                                    //O http nÃ£o tem um export default, entÃ£o vocÃª precisa usar import * as http.
                                    //A forma import http from 'node:http' sÃ³ funciona se o mÃ³dulo tiver export default, o que nÃ£o Ã© o caso do mÃ³dulo http.
                                    //Json - JavaScript Object Notation - Ã‰ um formato de dados leve, fÃ¡cil de ler e escrever para humanos, e fÃ¡cil de analisar e gerar para mÃ¡quinas. Ã‰ usado principalmente para transmitir dados entre um servidor e uma aplicaÃ§Ã£o web como texto.                                    
const users = [];
const server = http.createServer(async (req, res) => {
    const { method, url } = req  
    
    await json (req, res)                                //MÃ©todos HTTP: GET, POST, PUT, DELETE
                                                        //GET: Buscar uma informaÃ§Ã£o no servidor
    const buffers = []

    for await (const chunk of req) { //LÃª os dados da requisiÃ§Ã£o em pedaÃ§os (chunks) 
        buffers.push(chunk)
    }

    let bodyText = Buffer.concat(buffers).toString()

    try {
        req.body = bodyText ? JSON.parse(bodyText) : null
    } catch {
        req.body = null
    }

    if (method === 'GET' && url === '/users') {
        res.writeHead(200, { 'Content-Type': 'application/json' })
        return res.end(JSON.stringify(users))
    }

    if (method === 'POST' && url === '/users') {
        // Verifica se o corpo existe
        if (!req.body) {
            res.writeHead(400, { 'Content-Type': 'text/plain' })
            return res.end('Corpo invÃ¡lido ou ausente.')
        }

        const { name, email } = req.body

        if (!name || !email) {
            res.writeHead(400, { 'Content-Type': 'text/plain' })
            return res.end('Campos obrigatÃ³rios: name e email.')
        }

        const user = {
            id: users.length + 1,
            name,
            email,
        }

        users.push(user)

        res.writeHead(201, { 'Content-Type': 'application/json' })
        return res.end(JSON.stringify(user))
    }

    res.writeHead(404, { 'Content-Type': 'text/plain' })
    res.end('Rota nÃ£o encontrada')
})

server.listen(3333, () => {
    console.log('ðŸš€ Servidor rodando em http://localhost:3333')
})
